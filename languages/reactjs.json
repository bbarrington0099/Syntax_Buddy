{
    "name": "React",
    "sections": {
        "components": {
            "description": "Building blocks of React applications",
            "examples": [
                {
                    "title": "Functional Component",
                    "explanation": "Modern component using arrow function",
                    "code": "const Greeting = ({ name }) => {\n  return <h1>Hello, {name}!</h1>;\n};"
                },
                {
                    "title": "Class Component",
                    "explanation": "Traditional class-based component",
                    "code": "class Counter extends React.Component {\n  render() {\n    return <div>{this.props.count}</div>;\n  }\n}"
                }
            ]
        },
        "jsx": {
            "description": "JavaScript XML syntax extension",
            "examples": [
                {
                    "title": "Basic JSX",
                    "explanation": "Combining HTML-like syntax with JavaScript",
                    "code": "const element = (\n  <div>\n    <h1>Hello World</h1>\n    <p>{new Date().toLocaleDateString()}</p>\n  </div>\n);"
                }
            ]
        },
        "state_management": {
            "description": "Managing component state",
            "examples": [
                {
                    "title": "useState Hook",
                    "explanation": "State management in functional components",
                    "code": "const [count, setCount] = React.useState(0);\n<button onClick={() => setCount(count + 1)}>\n  Clicked {count} times\n</button>"
                },
                {
                    "title": "Class State",
                    "explanation": "State management in class components",
                    "code": "class Timer extends React.Component {\n  state = { seconds: 0 };\n  \n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({ seconds: this.state.seconds + 1 });\n    }, 1000);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  render() {\n    return <div>Seconds: {this.state.seconds}</div>;\n  }\n}"
                }
            ]
        },
        "props": {
            "description": "Passing data between components",
            "examples": [
                {
                    "title": "Prop Passing",
                    "explanation": "Parent to child communication",
                    "code": "const Parent = () => (\n  <Child message=\"Hello from parent\" />\n);\n\nconst Child = ({ message }) => (\n  <p>{message}</p>\n);"
                }
            ]
        },
        "hooks": {
            "description": "React Hooks for state and side effects",
            "examples": [
                {
                    "title": "useEffect",
                    "explanation": "Managing side effects",
                    "code": "React.useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]);"
                },
                {
                    "title": "Custom Hook",
                    "explanation": "Reusable logic encapsulation",
                    "code": "function useWindowWidth() {\n  const [width, setWidth] = React.useState(window.innerWidth);\n  \n  React.useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  return width;\n}"
                }
            ]
        },
        "routing": {
            "description": "Client-side navigation",
            "examples": [
                {
                    "title": "React Router",
                    "explanation": "Basic routing setup",
                    "code": "<BrowserRouter>\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"/about\" element={<About />} />\n  </Routes>\n</BrowserRouter>"
                }
            ]
        },
        "context": {
            "description": "Global state management",
            "examples": [
                {
                    "title": "Context API",
                    "explanation": "Sharing data across components",
                    "code": "const ThemeContext = React.createContext('light');\n\nconst App = () => (\n  <ThemeContext.Provider value=\"dark\">\n    <Toolbar />\n  </ThemeContext.Provider>\n);\n\nconst Toolbar = () => (\n  <ThemeContext.Consumer>\n    {theme => <div>Current theme: {theme}</div>}\n  </ThemeContext.Consumer>\n);"
                }
            ]
        },
        "performance": {
            "description": "Optimization techniques",
            "examples": [
                {
                    "title": "Memoization",
                    "explanation": "Preventing unnecessary re-renders",
                    "code": "const MemoizedComponent = React.memo(ExpensiveComponent);\n\nconst computeValue = React.useMemo(() => {\n  return expensiveCalculation(count);\n}, [count]);"
                }
            ]
        },
        "forms": {
            "description": "Handling user input",
            "examples": [
                {
                    "title": "Controlled Components",
                    "explanation": "Form management with React state",
                    "code": "const Form = () => {\n  const [value, setValue] = React.useState('');\n  \n  return (\n    <form>\n      <input\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n};"
                }
            ]
        },
        "testing": {
            "description": "Component testing strategies",
            "examples": [
                {
                    "title": "React Testing Library",
                    "explanation": "Testing component behavior",
                    "code": "test('renders greeting', () => {\n  render(<Greeting name=\"John\" />);\n  expect(screen.getByText(/hello, john/i)).toBeInTheDocument();\n});"
                }
            ]
        }
    }
}